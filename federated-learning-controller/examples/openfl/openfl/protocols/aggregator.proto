// Copyright (C) 2020-2023 Intel Corporation
// Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.

syntax = "proto3";

package openfl.aggregator;

import "openfl/protocols/base.proto";


service Aggregator {
  rpc GetTasks(GetTasksRequest) returns (GetTasksResponse) {}
  rpc GetAggregatedTensor(GetAggregatedTensorRequest) returns (GetAggregatedTensorResponse) {}
  rpc SendLocalTaskResults(stream DataStream) returns (SendLocalTaskResultsResponse) {}
  rpc InteropRelay(InteropMessage) returns (InteropMessage) {}
}

message MessageHeader {
  string sender = 1;
  string receiver = 2;
  string federation_uuid = 3;
  string single_col_cert_common_name = 4;
}

message GetTasksRequest {
  MessageHeader header = 1;
}

message Task {
  string name = 1;
  string function_name = 2;
  string task_type = 3;
  bool apply_local = 4;
}

message GetTasksResponse {
  MessageHeader header = 1;
  int32 round_number = 2;
  // these next three are exclusive. Oneof is probably a good idea
  repeated Task tasks = 3;  // these three are exclusive
  int32 sleep_time = 4;  // these three are exclusive
  bool quit = 5;  // these three are exclusive
}

message GetAggregatedTensorRequest {
  MessageHeader header = 1;
  string tensor_name = 2;
  int32 round_number = 3;
  bool report = 4;
  repeated string	tags = 5;
  bool require_lossless = 6;
}

// we'll actually send this as a data stream
message GetAggregatedTensorResponse {
  MessageHeader header = 1;
  int32 round_number = 2;
  NamedTensor tensor = 3;
}

// we'll actually send this as a data stream
message TaskResults {
  MessageHeader  header = 1;
  int32 round_number = 2;
  string task_name = 3;
  int32	data_size = 4;
  repeated NamedTensor tensors = 5;
}

message SendLocalTaskResultsResponse {
  MessageHeader header = 1;
}

message InteropMessage {
  MessageHeader header = 1;
  DataStream message = 2;
  map<string, string> metadata = 3;
}
